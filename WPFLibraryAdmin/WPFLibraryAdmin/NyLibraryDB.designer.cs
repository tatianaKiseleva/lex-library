#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFLibraryAdmin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyLibrary")]
	public partial class NyLibraryDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertMedia(Media instance);
    partial void UpdateMedia(Media instance);
    partial void DeleteMedia(Media instance);
    partial void InsertMediaAuthor(MediaAuthor instance);
    partial void UpdateMediaAuthor(MediaAuthor instance);
    partial void DeleteMediaAuthor(MediaAuthor instance);
    partial void InsertMediaLibrary(MediaLibrary instance);
    partial void UpdateMediaLibrary(MediaLibrary instance);
    partial void DeleteMediaLibrary(MediaLibrary instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertFormat(Format instance);
    partial void UpdateFormat(Format instance);
    partial void DeleteFormat(Format instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertLoan(Loan instance);
    partial void UpdateLoan(Loan instance);
    partial void DeleteLoan(Loan instance);
    partial void InsertLoanCard(LoanCard instance);
    partial void UpdateLoanCard(LoanCard instance);
    partial void DeleteLoanCard(LoanCard instance);
    partial void InsertLibrary(Library instance);
    partial void UpdateLibrary(Library instance);
    partial void DeleteLibrary(Library instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    #endregion
		
		public NyLibraryDBDataContext() : 
				base(global::WPFLibraryAdmin.Properties.Settings.Default.MyLibraryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NyLibraryDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyLibraryDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyLibraryDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NyLibraryDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Media> Medias
		{
			get
			{
				return this.GetTable<Media>();
			}
		}
		
		public System.Data.Linq.Table<MediaAuthor> MediaAuthors
		{
			get
			{
				return this.GetTable<MediaAuthor>();
			}
		}
		
		public System.Data.Linq.Table<MediaLibrary> MediaLibraries
		{
			get
			{
				return this.GetTable<MediaLibrary>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Format> Formats
		{
			get
			{
				return this.GetTable<Format>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Loan> Loans
		{
			get
			{
				return this.GetTable<Loan>();
			}
		}
		
		public System.Data.Linq.Table<LoanCard> LoanCards
		{
			get
			{
				return this.GetTable<LoanCard>();
			}
		}
		
		public System.Data.Linq.Table<Library> Libraries
		{
			get
			{
				return this.GetTable<Library>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<int> _AddressID;
		
		private string _PersonalNumber;
		
		private string _Email;
		
		private System.Nullable<int> _LoanCardID;
		
		private EntitySet<MediaAuthor> _MediaAuthors;
		
		private EntitySet<Loan> _Loans;
		
		private EntityRef<LoanCard> _LoanCard;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressIDChanging(System.Nullable<int> value);
    partial void OnAddressIDChanged();
    partial void OnPersonalNumberChanging(string value);
    partial void OnPersonalNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoanCardIDChanging(System.Nullable<int> value);
    partial void OnLoanCardIDChanged();
    #endregion
		
		public Person()
		{
			this._MediaAuthors = new EntitySet<MediaAuthor>(new Action<MediaAuthor>(this.attach_MediaAuthors), new Action<MediaAuthor>(this.detach_MediaAuthors));
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			this._LoanCard = default(EntityRef<LoanCard>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int")]
		public System.Nullable<int> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalNumber", DbType="NVarChar(50)")]
		public string PersonalNumber
		{
			get
			{
				return this._PersonalNumber;
			}
			set
			{
				if ((this._PersonalNumber != value))
				{
					this.OnPersonalNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonalNumber = value;
					this.SendPropertyChanged("PersonalNumber");
					this.OnPersonalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanCardID", DbType="Int")]
		public System.Nullable<int> LoanCardID
		{
			get
			{
				return this._LoanCardID;
			}
			set
			{
				if ((this._LoanCardID != value))
				{
					if (this._LoanCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoanCardIDChanging(value);
					this.SendPropertyChanging();
					this._LoanCardID = value;
					this.SendPropertyChanged("LoanCardID");
					this.OnLoanCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_MediaAuthor", Storage="_MediaAuthors", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<MediaAuthor> MediaAuthors
		{
			get
			{
				return this._MediaAuthors;
			}
			set
			{
				this._MediaAuthors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Loan", Storage="_Loans", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanCard_Person", Storage="_LoanCard", ThisKey="LoanCardID", OtherKey="LoanCardID", IsForeignKey=true)]
		public LoanCard LoanCard
		{
			get
			{
				return this._LoanCard.Entity;
			}
			set
			{
				LoanCard previousValue = this._LoanCard.Entity;
				if (((previousValue != value) 
							|| (this._LoanCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanCard.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._LoanCard.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._LoanCardID = value.LoanCardID;
					}
					else
					{
						this._LoanCardID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoanCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Person", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaAuthors(MediaAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_MediaAuthors(MediaAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Media")]
	public partial class Media : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaID;
		
		private string _Title;
		
		private System.Nullable<int> _PublisherID;
		
		private System.DateTime _PublishingDate;
		
		private string _ISBN;
		
		private int _CategoryID;
		
		private int _FormatID;
		
		private string _URL;
		
		private int _LanguageID;
		
		private string _LoanPeriod;
		
		private EntitySet<MediaAuthor> _MediaAuthors;
		
		private EntitySet<MediaLibrary> _MediaLibraries;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Format> _Format;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<Publisher> _Publisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaIDChanging(int value);
    partial void OnMediaIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnPublishingDateChanging(System.DateTime value);
    partial void OnPublishingDateChanged();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnFormatIDChanging(int value);
    partial void OnFormatIDChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLoanPeriodChanging(string value);
    partial void OnLoanPeriodChanged();
    #endregion
		
		public Media()
		{
			this._MediaAuthors = new EntitySet<MediaAuthor>(new Action<MediaAuthor>(this.attach_MediaAuthors), new Action<MediaAuthor>(this.detach_MediaAuthors));
			this._MediaLibraries = new EntitySet<MediaLibrary>(new Action<MediaLibrary>(this.attach_MediaLibraries), new Action<MediaLibrary>(this.detach_MediaLibraries));
			this._Category = default(EntityRef<Category>);
			this._Format = default(EntityRef<Format>);
			this._Language = default(EntityRef<Language>);
			this._Publisher = default(EntityRef<Publisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MediaID
		{
			get
			{
				return this._MediaID;
			}
			set
			{
				if ((this._MediaID != value))
				{
					this.OnMediaIDChanging(value);
					this.SendPropertyChanging();
					this._MediaID = value;
					this.SendPropertyChanged("MediaID");
					this.OnMediaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishingDate", DbType="Date NOT NULL")]
		public System.DateTime PublishingDate
		{
			get
			{
				return this._PublishingDate;
			}
			set
			{
				if ((this._PublishingDate != value))
				{
					this.OnPublishingDateChanging(value);
					this.SendPropertyChanging();
					this._PublishingDate = value;
					this.SendPropertyChanged("PublishingDate");
					this.OnPublishingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="NVarChar(50)")]
		public string ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatID", DbType="Int NOT NULL")]
		public int FormatID
		{
			get
			{
				return this._FormatID;
			}
			set
			{
				if ((this._FormatID != value))
				{
					if (this._Format.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatIDChanging(value);
					this.SendPropertyChanging();
					this._FormatID = value;
					this.SendPropertyChanged("FormatID");
					this.OnFormatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(50)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanPeriod", DbType="NChar(10)")]
		public string LoanPeriod
		{
			get
			{
				return this._LoanPeriod;
			}
			set
			{
				if ((this._LoanPeriod != value))
				{
					this.OnLoanPeriodChanging(value);
					this.SendPropertyChanging();
					this._LoanPeriod = value;
					this.SendPropertyChanged("LoanPeriod");
					this.OnLoanPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Media_MediaAuthor", Storage="_MediaAuthors", ThisKey="MediaID", OtherKey="MediaID")]
		public EntitySet<MediaAuthor> MediaAuthors
		{
			get
			{
				return this._MediaAuthors;
			}
			set
			{
				this._MediaAuthors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Media_MediaLibrary", Storage="_MediaLibraries", ThisKey="MediaID", OtherKey="MediaID")]
		public EntitySet<MediaLibrary> MediaLibraries
		{
			get
			{
				return this._MediaLibraries;
			}
			set
			{
				this._MediaLibraries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Media", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Medias.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Medias.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_Media", Storage="_Format", ThisKey="FormatID", OtherKey="FormatID", IsForeignKey=true)]
		public Format Format
		{
			get
			{
				return this._Format.Entity;
			}
			set
			{
				Format previousValue = this._Format.Entity;
				if (((previousValue != value) 
							|| (this._Format.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Format.Entity = null;
						previousValue.Medias.Remove(this);
					}
					this._Format.Entity = value;
					if ((value != null))
					{
						value.Medias.Add(this);
						this._FormatID = value.FormatID;
					}
					else
					{
						this._FormatID = default(int);
					}
					this.SendPropertyChanged("Format");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Media", Storage="_Language", ThisKey="LanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Medias.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Medias.Add(this);
						this._LanguageID = value.LanguageID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Media", Storage="_Publisher", ThisKey="PublisherID", OtherKey="PublisherID", IsForeignKey=true)]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Medias.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Medias.Add(this);
						this._PublisherID = value.PublisherID;
					}
					else
					{
						this._PublisherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaAuthors(MediaAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Media = this;
		}
		
		private void detach_MediaAuthors(MediaAuthor entity)
		{
			this.SendPropertyChanging();
			entity.Media = null;
		}
		
		private void attach_MediaLibraries(MediaLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Media = this;
		}
		
		private void detach_MediaLibraries(MediaLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Media = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaAuthor")]
	public partial class MediaAuthor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaAuthorID;
		
		private int _PersonID;
		
		private int _MediaID;
		
		private EntityRef<Media> _Media;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaAuthorIDChanging(int value);
    partial void OnMediaAuthorIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnMediaIDChanging(int value);
    partial void OnMediaIDChanged();
    #endregion
		
		public MediaAuthor()
		{
			this._Media = default(EntityRef<Media>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaAuthorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MediaAuthorID
		{
			get
			{
				return this._MediaAuthorID;
			}
			set
			{
				if ((this._MediaAuthorID != value))
				{
					this.OnMediaAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._MediaAuthorID = value;
					this.SendPropertyChanged("MediaAuthorID");
					this.OnMediaAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaID", DbType="Int NOT NULL")]
		public int MediaID
		{
			get
			{
				return this._MediaID;
			}
			set
			{
				if ((this._MediaID != value))
				{
					if (this._Media.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaIDChanging(value);
					this.SendPropertyChanging();
					this._MediaID = value;
					this.SendPropertyChanged("MediaID");
					this.OnMediaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Media_MediaAuthor", Storage="_Media", ThisKey="MediaID", OtherKey="MediaID", IsForeignKey=true)]
		public Media Media
		{
			get
			{
				return this._Media.Entity;
			}
			set
			{
				Media previousValue = this._Media.Entity;
				if (((previousValue != value) 
							|| (this._Media.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media.Entity = null;
						previousValue.MediaAuthors.Remove(this);
					}
					this._Media.Entity = value;
					if ((value != null))
					{
						value.MediaAuthors.Add(this);
						this._MediaID = value.MediaID;
					}
					else
					{
						this._MediaID = default(int);
					}
					this.SendPropertyChanged("Media");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_MediaAuthor", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.MediaAuthors.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.MediaAuthors.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaLibrary")]
	public partial class MediaLibrary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MediaLibraryID;
		
		private int _LibraryID;
		
		private int _MediaID;
		
		private string _Location;
		
		private EntitySet<Loan> _Loans;
		
		private EntityRef<Media> _Media;
		
		private EntityRef<Library> _Library;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaLibraryIDChanging(int value);
    partial void OnMediaLibraryIDChanged();
    partial void OnLibraryIDChanging(int value);
    partial void OnLibraryIDChanged();
    partial void OnMediaIDChanging(int value);
    partial void OnMediaIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public MediaLibrary()
		{
			this._Loans = new EntitySet<Loan>(new Action<Loan>(this.attach_Loans), new Action<Loan>(this.detach_Loans));
			this._Media = default(EntityRef<Media>);
			this._Library = default(EntityRef<Library>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaLibraryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MediaLibraryID
		{
			get
			{
				return this._MediaLibraryID;
			}
			set
			{
				if ((this._MediaLibraryID != value))
				{
					this.OnMediaLibraryIDChanging(value);
					this.SendPropertyChanging();
					this._MediaLibraryID = value;
					this.SendPropertyChanged("MediaLibraryID");
					this.OnMediaLibraryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryID", DbType="Int NOT NULL")]
		public int LibraryID
		{
			get
			{
				return this._LibraryID;
			}
			set
			{
				if ((this._LibraryID != value))
				{
					if (this._Library.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibraryIDChanging(value);
					this.SendPropertyChanging();
					this._LibraryID = value;
					this.SendPropertyChanged("LibraryID");
					this.OnLibraryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaID", DbType="Int NOT NULL")]
		public int MediaID
		{
			get
			{
				return this._MediaID;
			}
			set
			{
				if ((this._MediaID != value))
				{
					if (this._Media.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaIDChanging(value);
					this.SendPropertyChanging();
					this._MediaID = value;
					this.SendPropertyChanged("MediaID");
					this.OnMediaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaLibrary_Loan", Storage="_Loans", ThisKey="MediaLibraryID", OtherKey="MediaLibraryID")]
		public EntitySet<Loan> Loans
		{
			get
			{
				return this._Loans;
			}
			set
			{
				this._Loans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Media_MediaLibrary", Storage="_Media", ThisKey="MediaID", OtherKey="MediaID", IsForeignKey=true)]
		public Media Media
		{
			get
			{
				return this._Media.Entity;
			}
			set
			{
				Media previousValue = this._Media.Entity;
				if (((previousValue != value) 
							|| (this._Media.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Media.Entity = null;
						previousValue.MediaLibraries.Remove(this);
					}
					this._Media.Entity = value;
					if ((value != null))
					{
						value.MediaLibraries.Add(this);
						this._MediaID = value.MediaID;
					}
					else
					{
						this._MediaID = default(int);
					}
					this.SendPropertyChanged("Media");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_MediaLibrary", Storage="_Library", ThisKey="LibraryID", OtherKey="LibraryID", IsForeignKey=true)]
		public Library Library
		{
			get
			{
				return this._Library.Entity;
			}
			set
			{
				Library previousValue = this._Library.Entity;
				if (((previousValue != value) 
							|| (this._Library.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Library.Entity = null;
						previousValue.MediaLibraries.Remove(this);
					}
					this._Library.Entity = value;
					if ((value != null))
					{
						value.MediaLibraries.Add(this);
						this._LibraryID = value.LibraryID;
					}
					else
					{
						this._LibraryID = default(int);
					}
					this.SendPropertyChanged("Library");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.MediaLibrary = this;
		}
		
		private void detach_Loans(Loan entity)
		{
			this.SendPropertyChanging();
			entity.MediaLibrary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private EntitySet<Media> _Medias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Medias = new EntitySet<Media>(new Action<Media>(this.attach_Medias), new Action<Media>(this.detach_Medias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Media", Storage="_Medias", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Media> Medias
		{
			get
			{
				return this._Medias;
			}
			set
			{
				this._Medias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Format")]
	public partial class Format : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormatID;
		
		private string _Name;
		
		private EntitySet<Media> _Medias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormatIDChanging(int value);
    partial void OnFormatIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Format()
		{
			this._Medias = new EntitySet<Media>(new Action<Media>(this.attach_Medias), new Action<Media>(this.detach_Medias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FormatID
		{
			get
			{
				return this._FormatID;
			}
			set
			{
				if ((this._FormatID != value))
				{
					this.OnFormatIDChanging(value);
					this.SendPropertyChanging();
					this._FormatID = value;
					this.SendPropertyChanged("FormatID");
					this.OnFormatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_Media", Storage="_Medias", ThisKey="FormatID", OtherKey="FormatID")]
		public EntitySet<Media> Medias
		{
			get
			{
				return this._Medias;
			}
			set
			{
				this._Medias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Format = this;
		}
		
		private void detach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Format = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Languages")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _Name;
		
		private EntitySet<Media> _Medias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Language()
		{
			this._Medias = new EntitySet<Media>(new Action<Media>(this.attach_Medias), new Action<Media>(this.detach_Medias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Media", Storage="_Medias", ThisKey="LanguageID", OtherKey="LanguageID")]
		public EntitySet<Media> Medias
		{
			get
			{
				return this._Medias;
			}
			set
			{
				this._Medias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneID;
		
		private int _AddressID;
		
		private string _Number;
		
		private int _PhoneTypeID;
		
		private EntityRef<PhoneType> _PhoneType;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIDChanging(int value);
    partial void OnPhoneIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnPhoneTypeIDChanging(int value);
    partial void OnPhoneTypeIDChanged();
    #endregion
		
		public Phone()
		{
			this._PhoneType = default(EntityRef<PhoneType>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhoneID
		{
			get
			{
				return this._PhoneID;
			}
			set
			{
				if ((this._PhoneID != value))
				{
					this.OnPhoneIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneID = value;
					this.SendPropertyChanged("PhoneID");
					this.OnPhoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="Int NOT NULL")]
		public int PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_PhoneType", ThisKey="PhoneTypeID", OtherKey="PhonTypeID", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._PhoneTypeID = value.PhonTypeID;
					}
					else
					{
						this._PhoneTypeID = default(int);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Phone", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhonTypeID;
		
		private string _Name;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhonTypeIDChanging(int value);
    partial void OnPhonTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PhoneType()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhonTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhonTypeID
		{
			get
			{
				return this._PhonTypeID;
			}
			set
			{
				if ((this._PhonTypeID != value))
				{
					this.OnPhonTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhonTypeID = value;
					this.SendPropertyChanged("PhonTypeID");
					this.OnPhonTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_Phones", ThisKey="PhonTypeID", OtherKey="PhoneTypeID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Loan")]
	public partial class Loan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoanID;
		
		private int _PersonID;
		
		private int _MediaLibraryID;
		
		private System.DateTime _DueDate;
		
		private EntityRef<MediaLibrary> _MediaLibrary;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanIDChanging(int value);
    partial void OnLoanIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnMediaLibraryIDChanging(int value);
    partial void OnMediaLibraryIDChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    #endregion
		
		public Loan()
		{
			this._MediaLibrary = default(EntityRef<MediaLibrary>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MediaLibraryID", DbType="Int NOT NULL")]
		public int MediaLibraryID
		{
			get
			{
				return this._MediaLibraryID;
			}
			set
			{
				if ((this._MediaLibraryID != value))
				{
					if (this._MediaLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMediaLibraryIDChanging(value);
					this.SendPropertyChanging();
					this._MediaLibraryID = value;
					this.SendPropertyChanged("MediaLibraryID");
					this.OnMediaLibraryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="Date NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MediaLibrary_Loan", Storage="_MediaLibrary", ThisKey="MediaLibraryID", OtherKey="MediaLibraryID", IsForeignKey=true)]
		public MediaLibrary MediaLibrary
		{
			get
			{
				return this._MediaLibrary.Entity;
			}
			set
			{
				MediaLibrary previousValue = this._MediaLibrary.Entity;
				if (((previousValue != value) 
							|| (this._MediaLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MediaLibrary.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._MediaLibrary.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._MediaLibraryID = value.MediaLibraryID;
					}
					else
					{
						this._MediaLibraryID = default(int);
					}
					this.SendPropertyChanged("MediaLibrary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Loan", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Loans.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Loans.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanCard")]
	public partial class LoanCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoanCardID;
		
		private string _Login;
		
		private string _Password;
		
		private string _PIN;
		
		private bool _DaisyValidity;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanCardIDChanging(int value);
    partial void OnLoanCardIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPINChanging(string value);
    partial void OnPINChanged();
    partial void OnDaisyValidityChanging(bool value);
    partial void OnDaisyValidityChanged();
    #endregion
		
		public LoanCard()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanCardID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LoanCardID
		{
			get
			{
				return this._LoanCardID;
			}
			set
			{
				if ((this._LoanCardID != value))
				{
					this.OnLoanCardIDChanging(value);
					this.SendPropertyChanging();
					this._LoanCardID = value;
					this.SendPropertyChanged("LoanCardID");
					this.OnLoanCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIN", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PIN
		{
			get
			{
				return this._PIN;
			}
			set
			{
				if ((this._PIN != value))
				{
					this.OnPINChanging(value);
					this.SendPropertyChanging();
					this._PIN = value;
					this.SendPropertyChanged("PIN");
					this.OnPINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaisyValidity", DbType="Bit NOT NULL")]
		public bool DaisyValidity
		{
			get
			{
				return this._DaisyValidity;
			}
			set
			{
				if ((this._DaisyValidity != value))
				{
					this.OnDaisyValidityChanging(value);
					this.SendPropertyChanging();
					this._DaisyValidity = value;
					this.SendPropertyChanged("DaisyValidity");
					this.OnDaisyValidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanCard_Person", Storage="_Persons", ThisKey="LoanCardID", OtherKey="LoanCardID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.LoanCard = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.LoanCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Library")]
	public partial class Library : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LibraryID;
		
		private string _Name;
		
		private int _AddressID;
		
		private EntitySet<MediaLibrary> _MediaLibraries;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLibraryIDChanging(int value);
    partial void OnLibraryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    #endregion
		
		public Library()
		{
			this._MediaLibraries = new EntitySet<MediaLibrary>(new Action<MediaLibrary>(this.attach_MediaLibraries), new Action<MediaLibrary>(this.detach_MediaLibraries));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LibraryID
		{
			get
			{
				return this._LibraryID;
			}
			set
			{
				if ((this._LibraryID != value))
				{
					this.OnLibraryIDChanging(value);
					this.SendPropertyChanging();
					this._LibraryID = value;
					this.SendPropertyChanged("LibraryID");
					this.OnLibraryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_MediaLibrary", Storage="_MediaLibraries", ThisKey="LibraryID", OtherKey="LibraryID")]
		public EntitySet<MediaLibrary> MediaLibraries
		{
			get
			{
				return this._MediaLibraries;
			}
			set
			{
				this._MediaLibraries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Library", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Libraries.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Libraries.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MediaLibraries(MediaLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Library = this;
		}
		
		private void detach_MediaLibraries(MediaLibrary entity)
		{
			this.SendPropertyChanging();
			entity.Library = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublisherID;
		
		private string _Name;
		
		private System.Nullable<int> _AddressID;
		
		private EntitySet<Media> _Medias;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressIDChanging(System.Nullable<int> value);
    partial void OnAddressIDChanged();
    #endregion
		
		public Publisher()
		{
			this._Medias = new EntitySet<Media>(new Action<Media>(this.attach_Medias), new Action<Media>(this.detach_Medias));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int")]
		public System.Nullable<int> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Media", Storage="_Medias", ThisKey="PublisherID", OtherKey="PublisherID")]
		public EntitySet<Media> Medias
		{
			get
			{
				return this._Medias;
			}
			set
			{
				this._Medias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Publisher", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Publishers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Publishers.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Medias(Media entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _PostNumber;
		
		private string _City;
		
		private string _Country;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Phone> _Phones;
		
		private EntitySet<Library> _Libraries;
		
		private EntitySet<Publisher> _Publishers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnPostNumberChanging(string value);
    partial void OnPostNumberChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Address()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Libraries = new EntitySet<Library>(new Action<Library>(this.attach_Libraries), new Action<Library>(this.detach_Libraries));
			this._Publishers = new EntitySet<Publisher>(new Action<Publisher>(this.attach_Publishers), new Action<Publisher>(this.detach_Publishers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line2", DbType="NVarChar(50)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PostNumber
		{
			get
			{
				return this._PostNumber;
			}
			set
			{
				if ((this._PostNumber != value))
				{
					this.OnPostNumberChanging(value);
					this.SendPropertyChanging();
					this._PostNumber = value;
					this.SendPropertyChanged("PostNumber");
					this.OnPostNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Person", Storage="_Persons", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Phone", Storage="_Phones", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Library", Storage="_Libraries", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<Library> Libraries
		{
			get
			{
				return this._Libraries;
			}
			set
			{
				this._Libraries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Publisher", Storage="_Publishers", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<Publisher> Publishers
		{
			get
			{
				return this._Publishers;
			}
			set
			{
				this._Publishers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Libraries(Library entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Libraries(Library entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Publishers(Publisher entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
}
#pragma warning restore 1591
